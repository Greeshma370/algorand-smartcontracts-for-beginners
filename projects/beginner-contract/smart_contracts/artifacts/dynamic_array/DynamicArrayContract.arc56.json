{
    "name": "DynamicArrayContract",
    "structs": {},
    "methods": [
        {
            "name": "create",
            "args": [
                {
                    "type": "string",
                    "name": "section"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add",
            "args": [
                {
                    "type": "string",
                    "name": "section"
                },
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check",
            "args": [
                {
                    "type": "string",
                    "name": "section"
                },
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get",
            "args": [
                {
                    "type": "string",
                    "name": "section"
                }
            ],
            "returns": {
                "type": "string[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete",
            "args": [
                {
                    "type": "string",
                    "name": "section"
                },
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_section",
            "args": [
                {
                    "type": "string",
                    "name": "section"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "List": {
                    "keyType": "string",
                    "valueType": "string[]",
                    "prefix": "TGlzdA=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        373,
                        477,
                        573
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        81,
                        96,
                        114,
                        133,
                        162,
                        180
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        200
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        84,
                        99,
                        117,
                        136,
                        165,
                        183
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        340,
                        359,
                        403,
                        444,
                        463,
                        525,
                        544,
                        559
                    ],
                    "errorMessage": "check self.List entry exists"
                },
                {
                    "pc": [
                        336,
                        523,
                        540,
                        638
                    ],
                    "errorMessage": "dynamic array not created for this respective section"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAAECJgQETGlzdAQVH3x1AgAAADEbQQClggYEIN86VAQDgsp5BOSspecEDQ3LMQTsworBBG2xtbE2GgCOBgBlAFMANgAjABEAAiJDMRkURDEYRDYaAYgCGCNDMRkURDEYRDYaATYaAogBoiNDMRkURDEYRDYaAYgBhClMULAjQzEZFEQxGEQ2GgE2GgKIAReAAQAiTwJUKUxQsCNDMRkURDEYRDYaATYaAogAlCNDMRkURDEYRDYaAYgAeCNDMRlA/4cxGBREI0OKAwGL/SJZSYv/CEwkCyQISwEWVwYCTgKL/SRLAlKL/yQLr1CL/RWL/U8DTwJSUIv+UEwkC0kiTIsDiwIMQQAjiwRJFlcGAosBiwNJTgRPAl1JjAFLAVkkCAiMBCQIjANC/9WLAIsBUIwAiYoBACiL/1BJvEgqv4mKAgArKIv+UEcCvUUBRCJMvkQiWSKLBIsDDIsCjABBACaLAb5ESVcCAEwiWYsESU8CDEQkC0sBTFlKWSQIWIv/EkEAGSOMAIsAQAAQiwFJvkSL/yOI/zFLAbxIv4mLBCMIjARC/6+KAgErSSiL/lBJvUUBQQBDiwK+RCJZjAEijACLAIsBDEEAMIsCvkRJVwIATCJZiwBJTwIMRCQLSwFMWUpZJAhYi/8SQQAEI4wAiYsAIwiMAEL/yCKMAImKAQEoi/9QSb1FAUS+RImKAgAiKIv+UEcCvUUBRCpMvkQiWSKLBIsDDEEAPosBvkRJVwIATCJZiwRJTwIMRCQLSwFMWUpZJAhYi/8TiwKMAEEACosCi/8jiP5wjACLAIwCiwQjCIwEQv+6iwFJvEiLAr+JigEAKIv/UEm9RQFEvEiJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}