{
    "name": "Counter",
    "structs": {},
    "methods": [
        {
            "name": "get_address",
            "args": [],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "increment",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "decrement",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "counter": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y291bnRlcg=="
                },
                "last_changed_by": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "bGFzdF9jaGFuZ2VkX2J5"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        93,
                        105,
                        117,
                        134
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        155
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        96,
                        108,
                        120,
                        137
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        166,
                        171,
                        185,
                        192
                    ],
                    "errorMessage": "check self.counter exists"
                },
                {
                    "pc": [
                        161
                    ],
                    "errorMessage": "check self.last_changed_by exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMuZ2xvYmFsX3N0b3JhZ2UuY29udHJhY3QuQ291bnRlci5fX2FsZ29weV9lbnRyeXBvaW50X3dpdGhfaW5pdCgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEKICAgIGJ5dGVjYmxvY2sgImNvdW50ZXIiICJsYXN0X2NoYW5nZWRfYnkiIDB4MTUxZjdjNzUKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nbG9iYWxfc3RvcmFnZS9jb250cmFjdC5weTo4CiAgICAvLyBzZWxmLmNvdW50ZXIgPSBHbG9iYWxTdGF0ZShVSW50NjQoMCkpCiAgICBieXRlY18wIC8vICJjb3VudGVyIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2xvYmFsX3N0b3JhZ2UvY29udHJhY3QucHk6OQogICAgLy8gc2VsZi5sYXN0X2NoYW5nZWRfYnkgPSBHbG9iYWxTdGF0ZShBZGRyZXNzKCkpCiAgICBieXRlY18xIC8vICJsYXN0X2NoYW5nZWRfYnkiCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgIGFwcF9nbG9iYWxfcHV0CgptYWluX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nbG9iYWxfc3RvcmFnZS9jb250cmFjdC5weTo2CiAgICAvLyBjbGFzcyBDb3VudGVyKEFSQzRDb250cmFjdCk6CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAOQogICAgcHVzaGJ5dGVzcyAweDdmYWQ5NzgwIDB4NTBlYTgxY2IgMHgyZmE0NzMyOCAweDRiNWJkZGZkIC8vIG1ldGhvZCAiZ2V0X2FkZHJlc3MoKWFkZHJlc3MiLCBtZXRob2QgImdldCgpdWludDY0IiwgbWV0aG9kICJpbmNyZW1lbnQoKXZvaWQiLCBtZXRob2QgImRlY3JlbWVudCgpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fZ2V0X2FkZHJlc3Nfcm91dGVANSBtYWluX2dldF9yb3V0ZUA2IG1haW5faW5jcmVtZW50X3JvdXRlQDcgbWFpbl9kZWNyZW1lbnRfcm91dGVAOAoKbWFpbl9hZnRlcl9pZl9lbHNlQDExOgogICAgLy8gc21hcnRfY29udHJhY3RzL2dsb2JhbF9zdG9yYWdlL2NvbnRyYWN0LnB5OjYKICAgIC8vIGNsYXNzIENvdW50ZXIoQVJDNENvbnRyYWN0KToKICAgIGludGNfMCAvLyAwCiAgICByZXR1cm4KCm1haW5fZGVjcmVtZW50X3JvdXRlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2xvYmFsX3N0b3JhZ2UvY29udHJhY3QucHk6MjQKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGRlY3JlbWVudAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9pbmNyZW1lbnRfcm91dGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nbG9iYWxfc3RvcmFnZS9jb250cmFjdC5weToxOQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgaW5jcmVtZW50CiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2dldF9yb3V0ZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2dsb2JhbF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE1CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBnZXQKICAgIGl0b2IKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0X2FkZHJlc3Nfcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nbG9iYWxfc3RvcmFnZS9jb250cmFjdC5weToxMQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0X2FkZHJlc3MKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2xvYmFsX3N0b3JhZ2UvY29udHJhY3QucHk6NgogICAgLy8gY2xhc3MgQ291bnRlcihBUkM0Q29udHJhY3QpOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAxMQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMuZ2xvYmFsX3N0b3JhZ2UuY29udHJhY3QuQ291bnRlci5nZXRfYWRkcmVzcygpIC0+IGJ5dGVzOgpnZXRfYWRkcmVzczoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nbG9iYWxfc3RvcmFnZS9jb250cmFjdC5weToxMwogICAgLy8gcmV0dXJuIHNlbGYubGFzdF9jaGFuZ2VkX2J5LnZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAibGFzdF9jaGFuZ2VkX2J5IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmxhc3RfY2hhbmdlZF9ieSBleGlzdHMKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5nbG9iYWxfc3RvcmFnZS5jb250cmFjdC5Db3VudGVyLmdldCgpIC0+IHVpbnQ2NDoKZ2V0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2dsb2JhbF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE3CiAgICAvLyByZXR1cm4gc2VsZi5jb3VudGVyLnZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAiY291bnRlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5jb3VudGVyIGV4aXN0cwogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmdsb2JhbF9zdG9yYWdlLmNvbnRyYWN0LkNvdW50ZXIuaW5jcmVtZW50KCkgLT4gdm9pZDoKaW5jcmVtZW50OgogICAgLy8gc21hcnRfY29udHJhY3RzL2dsb2JhbF9zdG9yYWdlL2NvbnRyYWN0LnB5OjIxCiAgICAvLyBzZWxmLmNvdW50ZXIudmFsdWUgKz0gVUludDY0KDEpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAiY291bnRlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5jb3VudGVyIGV4aXN0cwogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGJ5dGVjXzAgLy8gImNvdW50ZXIiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2dsb2JhbF9zdG9yYWdlL2NvbnRyYWN0LnB5OjIyCiAgICAvLyBzZWxmLmxhc3RfY2hhbmdlZF9ieS52YWx1ZSA9IEFkZHJlc3MoVHhuLnNlbmRlcikKICAgIGJ5dGVjXzEgLy8gImxhc3RfY2hhbmdlZF9ieSIKICAgIHR4biBTZW5kZXIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZ2xvYmFsX3N0b3JhZ2UuY29udHJhY3QuQ291bnRlci5kZWNyZW1lbnQoKSAtPiB2b2lkOgpkZWNyZW1lbnQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2xvYmFsX3N0b3JhZ2UvY29udHJhY3QucHk6MjYKICAgIC8vIGlmIHNlbGYuY291bnRlci52YWx1ZSE9MDoKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJjb3VudGVyIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNvdW50ZXIgZXhpc3RzCiAgICBieiBkZWNyZW1lbnRfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2xvYmFsX3N0b3JhZ2UvY29udHJhY3QucHk6MjcKICAgIC8vIHNlbGYuY291bnRlci52YWx1ZSAtPSBVSW50NjQoMSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJjb3VudGVyIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNvdW50ZXIgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgYnl0ZWNfMCAvLyAiY291bnRlciIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2xvYmFsX3N0b3JhZ2UvY29udHJhY3QucHk6MjgKICAgIC8vIHNlbGYubGFzdF9jaGFuZ2VkX2J5LnZhbHVlID0gQWRkcmVzcyhUeG4uc2VuZGVyKQogICAgYnl0ZWNfMSAvLyAibGFzdF9jaGFuZ2VkX2J5IgogICAgdHhuIFNlbmRlcgogICAgYXBwX2dsb2JhbF9wdXQKCmRlY3JlbWVudF9hZnRlcl9pZl9lbHNlQDI6CiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiACAAEmAwdjb3VudGVyD2xhc3RfY2hhbmdlZF9ieQQVH3x1MRhAAAcoImcpMgNnMRtBAF6CBAR/rZeABFDqgcsEL6RzKARLW939NhoAjgQAKwAaAA4AAiJDMRkURDEYRIgAUiNDMRkURDEYRIgAOCNDMRkURDEYRIgAJxYqTFCwI0MxGRREMRhEiAARKkxQsCNDMRlA/8AxGBREI0MiKWVEiSIoZUSJIihlRCMIKExnKTEAZ4kiKGVEQQANIihlRCMJKExnKTEAZ4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}