{
    "name": "DynamicArrayContract",
    "structs": {},
    "methods": [
        {
            "name": "add",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "address",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "address",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "A": {
                    "keyType": "string",
                    "valueType": "address[]",
                    "prefix": "QQ=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        163,
                        276
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        42,
                        76
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        113
                    ],
                    "errorMessage": "Only the creator can add addresses"
                },
                {
                    "pc": [
                        99
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        45,
                        79
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        131,
                        154,
                        182,
                        248,
                        267
                    ],
                    "errorMessage": "check self.A entry exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAAEgJgIAAUExG0EAS4ICBDEp8XkEvTvhSzYaAI4CACQAAiJDMRkURDEYRDYaATYaAogAroABACJPAlSABBUffHVMULAjQzEZFEQxGEQ2GgE2GgKIAA0jQzEZQP/FMRgURCNDigIAKEcDMQAyCRJEKYv+UEm9RQFBAFkijACLBL5EIlmMAyKMAosCiwMMiwCMAUEAFosEvkRXAgCLAiQLJFiL/xJBACMjjAGLAUAAGosESb5EVwIAi/9QSRUkChZXBgJMUEsBvEi/iYsCIwiMAkL/tYACAAGL/1CLBEm8SEy/iYoCAShJKYv+UEm9RQFBADOLAr5EIlmMASKMAIsAiwEMQQAgiwK+RFcCAIsAJAskWIv/EkEABCOMAImLACMIjABC/9gijACJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}