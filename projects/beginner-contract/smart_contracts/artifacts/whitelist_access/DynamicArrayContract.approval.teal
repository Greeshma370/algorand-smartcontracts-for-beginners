#pragma version 10
#pragma typetrack false

// smart_contracts.whitelist_access.contract.DynamicArrayContract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 32
    bytecblock "" "A"
    // smart_contracts/whitelist_access/contract.py:4
    // class DynamicArrayContract(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0x3129f179 0xbd3be14b // method "add(string,address)void", method "check(string,address)bool"
    txna ApplicationArgs 0
    match main_add_route@5 main_check_route@6

main_after_if_else@9:
    // smart_contracts/whitelist_access/contract.py:4
    // class DynamicArrayContract(ARC4Contract):
    intc_0 // 0
    return

main_check_route@6:
    // smart_contracts/whitelist_access/contract.py:23
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/whitelist_access/contract.py:4
    // class DynamicArrayContract(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/whitelist_access/contract.py:23
    // @abimethod()
    callsub check
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_add_route@5:
    // smart_contracts/whitelist_access/contract.py:8
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/whitelist_access/contract.py:4
    // class DynamicArrayContract(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/whitelist_access/contract.py:8
    // @abimethod()
    callsub add
    intc_1 // 1
    return

main_bare_routing@7:
    // smart_contracts/whitelist_access/contract.py:4
    // class DynamicArrayContract(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@9
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts.whitelist_access.contract.DynamicArrayContract.add(name: bytes, account: bytes) -> void:
add:
    // smart_contracts/whitelist_access/contract.py:8-9
    // @abimethod()
    // def add(self,name: String, account: Address) -> None:
    proto 2 0
    bytec_0 // ""
    dupn 3
    // smart_contracts/whitelist_access/contract.py:10
    // assert Txn.sender == Global.creator_address, "Only the creator can add addresses"
    txn Sender
    global CreatorAddress
    ==
    assert // Only the creator can add addresses
    // smart_contracts/whitelist_access/contract.py:11
    // if name in self.A:
    bytec_1 // "A"
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    bz add_else_body@10
    // smart_contracts/whitelist_access/contract.py:12
    // exist= False
    intc_0 // 0
    frame_bury 0
    // smart_contracts/whitelist_access/contract.py:13
    // for index in urange(self.A[name].length):
    frame_dig 4
    box_get
    assert // check self.A entry exists
    intc_0 // 0
    extract_uint16
    frame_bury 3
    intc_0 // 0
    frame_bury 2

add_for_header@2:
    // smart_contracts/whitelist_access/contract.py:13
    // for index in urange(self.A[name].length):
    frame_dig 2
    frame_dig 3
    <
    frame_dig 0
    frame_bury 1
    bz add_after_for@7
    // smart_contracts/whitelist_access/contract.py:14
    // if self.A[name][index] == account:
    frame_dig 4
    box_get
    assert // check self.A entry exists
    extract 2 0
    frame_dig 2
    intc_2 // 32
    *
    intc_2 // 32
    extract3 // on error: Index access is out of bounds
    frame_dig -1
    ==
    bz add_after_if_else@5
    // smart_contracts/whitelist_access/contract.py:15
    // exist = True
    intc_1 // 1
    frame_bury 1

add_after_for@7:
    frame_dig 1
    // smart_contracts/whitelist_access/contract.py:17
    // if not exist:
    bnz add_after_if_else@11
    // smart_contracts/whitelist_access/contract.py:18
    // self.A[name].append(account)
    frame_dig 4
    dup
    box_get
    assert // check self.A entry exists
    extract 2 0
    frame_dig -1
    concat
    dup
    len
    intc_2 // 32
    /
    itob
    extract 6 2
    swap
    concat
    dig 1
    box_del
    pop
    box_put

add_after_if_else@11:
    retsub

add_after_if_else@5:
    // smart_contracts/whitelist_access/contract.py:13
    // for index in urange(self.A[name].length):
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    b add_for_header@2

add_else_body@10:
    // smart_contracts/whitelist_access/contract.py:20-21
    // # Create a new dynamic array if it does not exist
    // self.A[name] = DynamicArray[Address](account)
    pushbytes 0x0001
    frame_dig -1
    concat
    frame_dig 4
    dup
    box_del
    pop
    swap
    box_put
    retsub


// smart_contracts.whitelist_access.contract.DynamicArrayContract.check(name: bytes, account: bytes) -> uint64:
check:
    // smart_contracts/whitelist_access/contract.py:23-24
    // @abimethod()
    // def check(self,name: String, account: Address) -> bool:
    proto 2 1
    bytec_0 // ""
    dup
    // smart_contracts/whitelist_access/contract.py:25
    // if name in self.A:
    bytec_1 // "A"
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    bz check_after_if_else@8
    // smart_contracts/whitelist_access/contract.py:26
    // for index in urange(self.A[name].length):
    frame_dig 2
    box_get
    assert // check self.A entry exists
    intc_0 // 0
    extract_uint16
    frame_bury 1
    intc_0 // 0
    frame_bury 0

check_for_header@2:
    // smart_contracts/whitelist_access/contract.py:26
    // for index in urange(self.A[name].length):
    frame_dig 0
    frame_dig 1
    <
    bz check_after_if_else@8
    // smart_contracts/whitelist_access/contract.py:27
    // if self.A[name][index] == account:
    frame_dig 2
    box_get
    assert // check self.A entry exists
    extract 2 0
    frame_dig 0
    intc_2 // 32
    *
    intc_2 // 32
    extract3 // on error: Index access is out of bounds
    frame_dig -1
    ==
    bz check_after_if_else@5
    // smart_contracts/whitelist_access/contract.py:28
    // return True
    intc_1 // 1
    frame_bury 0
    retsub

check_after_if_else@5:
    // smart_contracts/whitelist_access/contract.py:26
    // for index in urange(self.A[name].length):
    frame_dig 0
    intc_1 // 1
    +
    frame_bury 0
    b check_for_header@2

check_after_if_else@8:
    // smart_contracts/whitelist_access/contract.py:29
    // return False
    intc_0 // 0
    frame_bury 0
    retsub
